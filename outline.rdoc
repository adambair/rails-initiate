= Rails Initiate

Past instructors include Adam Bair and Joe Grossberg

=== Description
This course is designed to introduce you to the basics of Ruby on Rails.

=== Installfest

* Who needs help getting Ruby and Rails up and running on their machines?

=== Windows

* Download and run the Ruby installer

    http://rubyinstaller.org

* Make sure that c:\Ruby\bin is in your path
* Verify that Ruby is installed (via command line)

    Start -> Run -> cmd

    ruby -v  #=> should give you a version number
    irb      #=> should load Interactive Ruby
    gem -v   #=> should give you a version number

* Install rails via RubyGems (which comes with the Ruby Installer)

    gem install rails

* Verify that Rails is installed correctly

    rails -v #=> should give you a version number

* Download the sqlite3 command line binary

    http://www.sqlite.org/sqlite-3_6_19.zip

* Download the sqlite3 dlls
  
    http://www.sqlite.org/sqlitedll-3_6_19.zip

* Unzip both files    
* Copy sqlite3.def and sqlite3.dll to c:\windows\system32
* Copy sqlite3.exe to c:\windows\system32

* Install you preferred text editor
  - We recommend E for this class (basically Textmate for windows)

    http://www.e-texteditor.com/

  - You may also want to consider using Vim.

    http://www.vim.org/download.php

=== OSX
You can use the version of Ruby that is included with OSX but I find that it makes life easier in the long run to reinstall Ruby through Macports. You can easily update Ruby and anything that you install from Macports will be aware of your updated version.

* Make sure you install the Developer Tools which includes XCode and the GCC compiler.
* You can install this from the 2nd disk that comes with OSX called 'Developer Tools'
* If you don't have this disk you can download XCode from Apple (about 700MB)
  
  http://developer.apple.com/mac

* Download and install Macports

    http://www.macports.org/install.php

* Verify that Macports is installed correctly

    port #=> then type quit to exit

* Install Ruby via Macports

    sudo port install ruby

* Make sure that you update your path so that /usr/local/bin is first
  - This will ensure that binaries installed by Macports are picked up before the OSX version.

* Verify that Ruby is installed correctly

    ruby -v  #=> should give you a version number
    irb      #=> should load Interactive Ruby

* Install sqlite3 from Macports

    sudo port install sqlite3

* Install the ruby sqlite3 library via RubyGems

    sudo gem install sqlite3-ruby

* Verify that sqlite3 is installed correctly

    sqlite3 --version #=> should display a version number

* Install Ruby on Rails via RubyGems
  
    sudo gem install rails

* Verify that Rails is installed correctly

    rails -v #=> should give you a version number

* Install you preferred text editor
  - We recommend Textmate for this class.

    http://macromates.com/

  - You may also want to consider using Vim.

    http://www.vim.org/download.php

=== Linux

* Use whatever package manager your comfortable with (yum, apt, portage, etc)
* Install ruby, rubygems, sqlite3, and rails
* The instructions should be about the same as OSX
* Just substitute Macports with the package manager of your choice
* Install your preferred editor

=== Creating a New Rails Application
* The 'rails some_name' will create a new directory called 'some_name'
* It will then build out the basic framework in which you can build your application

    rails name_of_application

=== Anatomy of a Rails applicatoin

    app     #=> models, views, controllers, helpers, app logic
    config  #=> database, environment configuration, routes
    db      #=> migrations, schema.rb
    doc     #=> a place for your app's documentation
    lib     #=> library files, rake tasks, code that doesn't fit in the app/* folders
    log     #=> log files for all of your environments (prod, dev, test)
    public  #=> accessable to everyone, images, javascript, stylesheets, static pages
    script  #=> console, server, generators
    spec    #=> rspec tests/specifications and configuration
    test    #=> built in test suite Test::Unit
    tmp     #=> sessions, cache, etc
    vendor  #=> 3rd party code, plugins, gems, vendored rails

=== Basic Anatomy of a Rails Request


                                    -> Model
    Browser -> Routes -> Controller -> View   -> Browser
                                    -> Helper


=== Environments
* By default Rails has 3 environments: development, test, and production
* Development 
  - Used by default
  - Heavy verbose logging
  - Reloads classes each request
  - Slower because it's reloading the app so often (to pick up changes)

* Test 
  - Used when running tests (volatile, data is not safe here)
  - Database is blown away each time tests are run

* Production
  - Caches classes, doesn't reload the application per request
  - Much less logging
  - Fast

* Environments have separate configurations
  - config/environments/development.rb, test.rb, production.rb
  - Each environment has it's own entry in config/database.yml
  - config/environment.rb is run for every environment

* You can create your own environments (the defaults are just strong suggestions)
  - Ofen you'll see an additional environment called 'staging'

=== Initializers
* Live in config/initializers/*
* Provide specific configuration for your application when it loads

=== Starting a Rails application
    
    ruby script/server  #=> start app in dev mode at http://localhost:3000
    ruby script/server -p 4000 #=> starts the app at http://localhost:4000
    ruby script/server -e production #=> start the application in production mode

=== Lab 01: Create a Rails Application [ 01_create_a_rails_application.rb ]
* Use the 'rails' command to create a new application called 'blog'
* Test your application by running 'ruby script/server' in the blog folder
* View your application in a web browser
* Explore the directory structure of your newly created application

=== Generators
Generators will allow you to rapidly add baseline functionality to a Rails application

* There are built in generators that come with rails
* There are also custom generators provided by 3rd party libraries
* Once you're comfortable with Ruby and Rails you can even create your own

    ruby script/generate #=> will list all available generators

=== Creating a Scaffold
A Scaffold will create all views, models, controllers, routes, and migrations for a resource

    ruby script/generate scaffold #=> will explain what the generator does

    ruby script/generate scaffold Post title:string body:text
      # the title/body arguments are what populate your migration

=== Running a migration
After you create a scaffold you'll need to run the migration to create the proper table and fields within your database.

    rake db:migrate   #=> run all new migrations on the development database

=== Reversing a migration

    rake db:rollback  #=> undo the last migration

=== NEVER MODIFY OLD MIGRATIONS
* This will cause headaches for other developers and for deployments
* 'rake db:migrate' will only run the newest migrations
* Old migrations are never run again unless you go all the way back down
* Think of migrations as 'run once' operations
* If you need to change something in the database, make a new migration
* Modifying old migrations will bite you sooner or later

=== Removing a Scaffold
If you have run migrations from a scaffold, you need to rollback your migration before deleting the scaffold (which will also delete the migration)

    rake db:rollback
    ruby script/destroy scaffold Post

=== Lab 02: Create a Post Resource [ 02_create_a_post_resource.rb ]
* Use the scaffold generator to create a Post resource
* The Post should have a title, body, and author fields
* Use rake to migrate your database
* Start your application and explore the freshly minted scaffold

=== Rake
rake (Ruby make) is a tool to run 'tasks' such as migrations, tests, etc

* Rake tasks are simply specialized Ruby files
* All the code within a task is Ruby

* Rake tasks are usually loosely related utility tasks that are not required during the normal run of your application. Examples:
  - Data imports
  - Data conversions
  - Rotating logs
  - Running tests
  - Running migrations
  - Running code metrics

* You can list all rake tasks associated with an application by using '-T'

    rake -T       #=> list all tasks in an application
    rake -T db    #=> list all tasks with 'db' in the name
    rake -t test  #=> list all tasks with 'test' in the name

=== Console
* The Rails Console is like irb but within the context of your Rails application
* You can access any part of your application through the console
* Execute arbitrary ruby code on the fly just like in irb

    ruby script/console
    
    Post              #=> List all of the columns in the posts table

    Post.all          #=> Finds all posts
    Post.last         #=> Finds last post
    Post.first        #=> Finds first post

    post = Post.new(:title => 'happy', :body => 'smiles')
    post.save         #=> Saves the new object to the database

    Post.create(:title => 'happy', :body => 'smiles')
                      #=> Will save the object directly to the database

    Post.find_by_title('happy')
                      #=> Finds first post with the title happy

    Post.find_all_by_title('happy')
                      #=> Finds all posts with the title happy

    Post.destroy_all  #=> Deletes all posts from the database

=== Routes
* Routes live in config/routes.rb
* This is where you specify what actions are available for your application

    map.resources :posts
    # generate all routes for the posts_controller
    # localhost:3000/posts

    map.root => :controller_name, :action => :action_name
    # change the default route for your application to point at the specified location
    # make sure to delete public/index.html for the root route to be functional

=== Display all available routes

    rake routes
    # display all routes available to your application

=== Lab 03: Remove Default Rails Page [ 03_remove_default_rails_page.rb ]
* Remove the default Rails landing page (Welcome to Rails)
* Create a route that will display all of your Posts at localhost:3000/

=== Models
Models interact with the database and contain the logic for your application

* Models are Ruby classes that descend from ActiveRecord::Base

* ActiveRecord is an ORM that provides all database functionality
    
* Question: What is an ORM?

    ORM stands for Object Relational Mapper
    It maps SQL statements to code and objects
    It essentially translates code into SQL statements

* This is where the business logic should live

* All of the data associations and validations live here
  - validation examples
      http://ar.rubyonrails.org/classes/ActiveRecord/Validations/ClassMethods.html
  - association examples
      http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html
  - customize validation messages using
      validates_presence_of :name, :message => 'custom message'

=== Lab 04: Create a Comment Resource [ 04_create_a_comment_resource.rb ]
* Use scaffolding to create a Comment resource with author and body fields
* Extra Credit: Don't use scaffolding (generators are allowed)
* Verify your new resource in a browser

=== ActiveRecord Relationships: has_many / belongs_to
* Two halves of a single relationship
* The belongs_to side of the association is where the foreign key is located

    class Author
      has_many :books
    end

    class Book
      belongs_to :author
    end

* The argument for belongs_to is singular while has_many's is plural
* This relationship hinges upon a field in the book table 'author_id'
* ActiveRecord assumes that this field exists
* The x_id assumes that x is the lowercase classname of the relationship ex:

    class Student
      has_many :books
    end

    class Book
      belongs_to :student
    end

    # the books table would need to have a student_id field

=== Lab 05: Post Comment Association [ 05_post_comment_association.rb ]
* Create a migration that adds a 'post_id' field to the comments table
* Create a has_many relationship between the Post and Comment models
* Verify the relationship through the Rails console
 
=== Controllers

* Handle all of the requests to your application
* Broker data between the Model and the View layers of MVC
* Methods within controllers that are available for requests are called 'actions'
* Provide data to your views using instance variables
  - The @ sign denotes an instance variable: @post or @posts for example
  - Keep the number of instance variables to a minimum per request for clarity
* Protect methods that are not meant to be hit directly from the web with private or protected
* Session and authentication management happens here in the Controller layer of MVC
* Anything request driven lives here
* Keep controllers small by keeping business logic in your models

=== Default actions for RESTFUL Controllers
* By default you will have 7 actions available

    # GET /comments
    def index
    end

    # GET /comments/1
    def show
    end

    # GET /comments/new
    def new
    end

    # GET /comments/1/edit
    def edit
    end

    # POST /comments
    def create
    end

    # PUT /comments/1
    def update
    end

    # DELETE /comments/1
    def destroy
    end

* These 7 actions allow for all of the basic CRUD operations
* These actions also map to HTTP verbs to create a RESTful interface

* Question: What are CRUD operations?

    CRUD stands for: 'create', 'read', 'update', 'destroy'
    CRUD maps to the standard HTTP verbs

* Question: What are HTTP verbs?
    
    HTTP verbs are specified in the headers of a web request
    There are 4 different verbs that can be used: 'post', 'get', 'put', 'delete'

* Question: What does RESTful mean?

    REST stands for 'REpresentation State Transfer'
    An application is RESTful when it maps HTTP verbs to application endpoints (actions in Rails)
    Basically REST = HTTP verbs + CRUD

=== Respond_to Blocks
* Rails scaffolding provides html and xml by default

    # start your rails application and go to http://localhost:3000/posts
    # then visit http://localhost:3000/posts.xml
    # xml is built right in from the start

* You can change the format of the information your application returns
* html, xml, and json are built into Rails
* You can also specify your own custom types if necessary

  respond_to do |format|
    format.html # will render index.html.erb
    format.xml  { render :xml => @posts }
    format.json { render :json => @posts }
  end

* Please be aware the respond_to blocks are NOT REQUIRED
* You can remove them (keeping the required logic)
* Your application will still serve html requests by default

=== Views
* Views are where your markup and ERB live 
* You should try to keep complexity to a minimum
* No data logic or munging should happen here
* keep things dry by moving logic into helpers and repeated markup into helpers

=== ERB - embedded Ruby
* <%  %> and <%= %> are the tags for erb
* Execute Ruby within the context of html

    <% 1+1 %>       #=> will be evaluated but not displayed
    <%= 1+1 %>      #=> will be evaluated and displayed (2)
    <%# 1+1 %>      #=> will not be evaluated or displayed

=== Partials
* Extract common view logic into re-usable html fragments
* Partial filenames begin with an underscore: _post.html.erb

  <%= render :partial => 'post', :collection => @posts %>
  # will render the app/posts/_post.erb partial once for each post in @posts

* You can also pass local variables into the partial

  <%= render :partial => 'comment_fields', :locals => {:f => f } %>
  # will make the local form variable 'f' available in the partial
  
=== Lab 06: Extract Post Form Fields [ 06_extract_post_form_fields.rb ]
* Create a partial that will contain extracted post form fields
* Extract common form fields from app/views/posts/edit.html.erb and new.html.erb
* Put the common fields into the partial
* Make sure that the forms still function

=== Layouts
* Layouts are html/erb that wrap each of your views
* They live in /views/layouts
* It's common to have only a few layouts for your application
  - examples: application.html.erb, site.html.erb, admin.html.erb

* Scaffolds create a layout for each scaffold
  - you should ditch these and build your own application.html.erb

* This is also where you include your css and javascript files
* Include script.aculo.us and prototype

    <%= javascript_include_tag :defaults %>

* You can specify a layout manually in the controller

      class PostsController < ApplicationController
        layout 'custom_layout'
      end

* The default layout is 'app/views/layouts/application.html.erb'
* Yield is what will display each of your views
* This is where you can create your headers and footers

    <%= render :partial => 'header' %>
    <%= yield %>
    <%= render :partial => 'footer' %>

=== Helpers

* All helpers are available to your views

    # application_controller.rb
    helper :all
    # makes all helpers available to all views

* You can extract logic from your views into methods here
* These are normal ruby methods that you can access from your views

    # Example
    # app/helpers/posts_helper.rb
    module PostsHelper
      def comment_count(post)
        pluralize(post.comments.count, 'Comments')
      end
    end

    # in a view somewhere
    <%= comment_count(@post) %>

=== Routes
* This is where you specify what actions are available for your application

    rake routes
     - display all routes available to your application

    map.resources :posts
      - generate all routes for the posts_controller
        - localhost:3000/posts

    map.resources :posts, :has_many => :comments
      - generate all routes for the posts_controller along with routes for comments
        - localhost:3000/posts/:id/comments

    map.root => :controller_name, :action => :action_name
      - change the default route for your application to point at the specified location
      - make sure to delete public/index.html for the root route to be functional

=== Lab 07a: Nested Resources Part 1 [ 07a_nested_resources_part_1.rb ]
* Create a route that reflects the post has_many comments relationship
* Verify the routes using 'rake routes'

* Nest the CommentsController
  - Add a before filter to find the post from param[:post_id]
  - Hint: 

    private
      def find_post
        Post.find(params[:post_id]
      end

  - Only find and operate on comments scoped to the post found in the before filter
  - Hint:

    @comment = @post.comments.find(params[:id])

  - Change redirects to the PostsController#show action

=== Lab 07b: Nested Resources Part 2 [ 07b_nested_resources_part_2.rb ]
* List all comments associated with a post in app/views/posts/show.html.erb
* Add a comment form to app/views/posts/show.html.erb
  - You can steal the one from app/views/comments/new.html.erb
  - Make sure to update the form to use the proper nested route
  - Hint: 

    <% form_for :comment, :url => post_comments_path(@post) do |f| %>

=== Basic authentication
* This is BASIC authentication
* Good for quick one-offs
* Warning: username and password are sent to the server in PLAIN TEXT
    
    # in app/controllers/applicaiton_controller.rb

    private
      def authenticate
        authenticate_or_request_with_http_basic do |user, pass|
        user == "admin" && pass == "password"
      end

* You can protect methods by using before_filters in your controllers

    class PostsController < ApplicationController
      before_filter :authenticate, :only => [:destroy]

      def destroy
        # some logic
      end
    end
  
    # this will prompt a user for a username and a password on the destroy action

- For more robust authentication check out these plugins:
  - Authlogic: http://github.com/binarylogic/authlogic/tree/master
  - Clearance: http://github.com/thoughtbot/clearance/tree/master

=== Lab 08: Add basic authentication [ 08_add_basic_authentication.rb ]
* Protect the destroy and edit in the CommentsController with Basic Auth

=== Concepts

* DRY - Don't Repeat Yourself
  avoid duplicated code - extract duplicate code into a single method

* COC - Convention over Configuration
  - many of the small decisions have already been made for you
  - COC allows you to focus on the problem domain of your application instead of worrying about where code will live, how things will be named, etc

* MVC - Model, View, Controller
  - an architecture style that separates concerns of data/logic, action/request, and presentation

  View
    - User sees this level
    - html, markup, js, css, forms

  Models
    - business logic
    - database interaction
    - the bulk of your application logic
    - MAXIMUM FUNCTIONALITY

  Controller
    - brokers data between the Model and View
    - MINIMUM FUNCTIONALITY

* Fat Model, Skinny Controller
  - keep all of your logic in your model

=== Degugging
* Rails comes with a few things to help you debug
* Printing out an object to a web page from within a view

    <%= debug @post %>

* Logging using the default logger that comes with Rails

    logger.warn "Something is broken"
    # you can specify (debug|info|warn|error|fatal) by default
    # Rails will log these to the appropriate log/* file

* Ruby-Debug
  - sudo gem install ruby-debug
  - Interactive debugging
  - Place the word 'debugger' anywhere in your application
  - Start your server with:

    ruby script/server --debugger

  - When your application gets to the 'debugger' statement you'll have a live console into your application
  - In the debugger console you can type 'help' for all available commands

=== Plugins
* Add 3rd party code to your application
* No dependency management built in
* Example: install fu_fu into vendor/plugins/fu-fu

    ruby script/plugin install install git://github.com/adambair/fu-fu.git

* Example: remove the installed plugin

    ruby script/plugin remove fu-fu

=== config.gem
* Add 3rd party RubyGem packages to your application
* Rails has dependency management baked in using config.gem in config/environment.rb
* You can also specify which gems your application needs using config.gem
  - add the following line to your config/environment.rb

    config.gem 'mislav-will_paginate', :version => '~> 2.2.3', 
                                       :lib => 'will_paginate', 
                                       :source => 'http://gems.github.com'

  - you can then install this gem using the following command:

    sudo rake gems:install

* If someone doesn't have this gem and they try to start the application, they will be notified of the dependency.
* You can package your gem dependencies with your application by using the following command:

    rake gems:unpack

* This will unpack all of the required gems to vendor/gems/*
* Rails will check vendor before checking the system for the required gems

== Vendor Rails
* You can freeze a Rails version to your application using the following command:

    rake freeze:edge

* Once you've 'vendored' rails, the app will use the vendor version of rails instead of the version installed on the system
* You can even specify what version of rails you'd like to vendor:

    rake freeze:edge VERSION=2.2.3

=== Testing
* This is a class in itself - we could fill volumes with testing methodology
  - unfortunately we only went into this briefly

* The idea is that you want to write a test to assert your intention for the code you are about to write. 
* Build up a set of regression test as you build your software.

=== Red, Green, Refactor
* Write the test first, run it, it fails because there is no code (red)
* Write just enough code to satisfy the test, run it, it passes (green)
* Consider what you've just written and see if it could be written better in a different way (refactor)

=== Autotest 
* http://github.com/seattlerb/zentest/
* Autotest run all of your tests automatically
* After it's initial run it will sit there watching your files
* When a file or test changes - Autotest will only run the appropriate tests!
* The gem is called ZenTest
* Just run 'autotest' in the root of your application

=== Continous Integration Testing
* Integrity http://integrityapp.com
* CruiseControl.rb http://cruisecontrolrb.thoughtworks.com/
* Watches your repository and will run the test suite for each commit
* Will email the entire team if a test fails (if configured)

=== Test::Unit
* Test::Unit is the name of the built-in test suite that ships with Rails
* Test::Unit (TDD) - Test Driven Development
* Tests usually live in /test folder of your project root
* Example

    class PersonTest
      def test_person_has_full_name
        person = Person.new(:first_name => 'Adam', :last_name => 'Bair')
        assert_equal('Adam Bair', person.full_name)
      end
    end

=== RSpec
* http://github.com/dchelimsky/rspec/
* Rspec (BDD) - Behavior Driven Development
* spec/spec.opts - change --format from 'progress' to 'specdoc' for verbose output
* RSpec tests (or specs) usually live in /spec in the root of your project
* Example:

    describe Person do
      it 'should have a first name' do
        person = Person.new(:first_name => 'Adam', :last_name => 'Bair')
        person.full_name.should == 'Adam Bair'
      end
    end

=== Cucumber 
* http://www.cukes.info
* Used for creating executable user stories
* Integration testing
* Commonly run with webrat (headless web browser)
  - Simulates a user clicking around your site according to your specifications

* Example:

    Feature: Addition
      In order to avoid silly mistakes
      As a math idiot
      I want to be told the sum of two numbers
     
      Scenario Outline: Add two numbers
        Given I have entered <input_1> into the calculator
        And I have entered <input_2> into the calculator
        When I press <button>
        Then the result should be <output> on the screen
     
      Examples:
        | input_1 | input_2 | button | output |
        | 20 | 30 | add | 50 |
        | 2 | 5 | add | 7 |
        | 0 | 40 | add | 40 |
  
=== FactoryGirl 
* http://github.com/thoughtbot/factory_girl/tree/master
* Fixture replacement - an alternative to static fixtures in a YAML file
* You can build test fixtures on the fly instead of creating them beforehand

=== Metric_fu
* http://github.com/jscruggs/metric_fu
* Code metrics for Ruby and Rails projects
* Test Coverage, code complexity, and general metrics
* It uses Saikuro, Flog, Flay, Rcov, Reek, Roodi, and Subversion/Git by default
* Generates graphs that track changes over time

=== Heroku
* http://www.heroku.com
* SIMPLE Ruby hosting 
* Can host any RACK enabled applications (Sinatra and Rails come to mind)
* Uses git exclusively
* Free to setup small instance (for personal, testing, staging, or small sites)
* Can have as many free accounts as you want
* Very easy to get up and running:

    rails myapp
    cd myapp
    git init
    git add .
    git commit -m "my new app"
    heroku create
    git push heroku master

=== SASS (Syntatically Awesome Stylesheets)
* http://sass-lang.com
* A language that compiles down to CSS
* Adds variables, mixins, functions, and arithmetic 
* Example that allows rounded corners in Mozilla and Webkit

    =rounded_bottom_corners
      :-moz-border-radius-bottomleft 8px
      :-moz-border-radius-bottomright 8px
      :-webkit-border-bottom-right-radius 8px
      :-webkit-border-bottom-left-radius 8px

    =rounded_top_corners
      :-moz-border-radius-topleft 8px
      :-moz-border-radius-topright 8px
      :-webkit-border-top-right-radius 8px
      :-webkit-border-top-left-radius 8px

    #container
      +rounded_top_corners
      +rounded_bottom_corners

    #special_container
      +rounded_top_corners

=== Resources
* The Well-Grounded Rubyist by David A. Black 
  - http://www.amazon.com/Well-Grounded-Rubyist-David-Black/dp/1933988657

* The Ruby Programming Language by Yukihiro Matsumoto and David Flanagan 
  - http://www.amazon.com/Ruby-Programming-Language-David-Flanagan/dp/0596516177

* The Ruby Way 2nd Edition by Hal Fulton 
  - http://www.amazon.com/Ruby-Way-Second-Techniques-Programming/dp/0672328844

* Why's Poignant Guide to Ruby
  - http://mislav.uniqpath.com/poignant-guide/

* Mr. Neighborly's Humble Little Ruby Book
  - http://www.humblelittlerubybook.com/

* Ruby Cookbook
  - http://oreilly.com/catalog/9780596523695/

* Confreaks
  - http://www2.confreaks.com/events

* The Least Surprised in "The Red Scared"
  - http://www.youtube.com/watch?v=mXZ_htL1rOI
  - http://www.youtube.com/watch?v=ng95M-cRb44
  - http://www.youtube.com/watch?v=Du_RTMmofWM

* Theory - Smalltalk Best Practice Patterns by Kent Beck 
  - http://www.amazon.com/Smalltalk-Best-Practice-Patterns-Kent/dp/013476904X

* Theory - Refactoring: Improving the Design of Existing Code by Kent Beck and Martin Fowler
  - http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672

* Agile Web Development with Rails 3rd Edition
  - http://pragprog.com/titles/rails3/agile-web-development-with-rails-third-edition
  - The original Rails book, now in it's 3rd iteration

* The RSpec/Cucumber Book
  - http://pragprog.com/titles/achbd/the-rspec-book
  - creators of RSpec and Cucumber

* Railscasts
  - http://www.railscasts.com

* Peepcode
  - http://www.peepcode.com
